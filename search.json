[
  {
    "objectID": "content/01_journal/01_machinelearningfundamentals.html",
    "href": "content/01_journal/01_machinelearningfundamentals.html",
    "title": "01 Machine Learning Fundamentals",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "content/01_journal/01_machinelearningfundamentals.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "content/01_journal/01_machinelearningfundamentals.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n5.1 Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "5.1 Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %&gt;% glimpse()\n\n#&gt; Rows: 1,225,765\n#&gt; Columns: 8\n#&gt; $ symbol   &lt;chr&gt; \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n#&gt; $ date     &lt;date&gt; 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n#&gt; $ open     &lt;dbl&gt; 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n#&gt; $ high     &lt;dbl&gt; 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n#&gt; $ low      &lt;dbl&gt; 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n#&gt; $ close    &lt;dbl&gt; 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n#&gt; $ volume   &lt;dbl&gt; 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n#&gt; $ adjusted &lt;dbl&gt; 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n\n# Apply your data transformation skills!\nsp_500_daily_returns_tbl &lt;- sp_500_prices_tbl %&gt;% \n    select(symbol, date, adjusted) %&gt;%          \n    filter(date &gt;= \"2018-01-01\") %&gt;%            \n    group_by(symbol) %&gt;% \n    mutate(adj_lag = lag(adjusted)) %&gt;% \n    filter(!is.na(adj_lag)) %&gt;% \n    mutate(diff = adjusted - adj_lag,\n           pct_return = diff / adj_lag) %&gt;% \n    select(symbol, date, pct_return)\n\nsp_500_daily_returns_tbl\n\n\n  \n\n\n# Output: sp_500_daily_returns_tbl"
  },
  {
    "objectID": "content/01_journal/01_machinelearningfundamentals.html#step-2---convert-to-user-item-format",
    "href": "content/01_journal/01_machinelearningfundamentals.html#step-2---convert-to-user-item-format",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n5.2 Step 2 - Convert to User-Item Format",
    "text": "5.2 Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl &lt;- read_rds(\"C:/Users/ranja/Documents/GitHub/ss24-bdml-ranjan/Business Decisions with Machine Learning/Machine Learning/data/Business Decisions with Machine Learning/sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n\n  \n\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n\n# Convert to User-Item Format\nstock_date_matrix_tbl &lt;- sp_500_daily_returns_tbl %&gt;% \n    pivot_wider(names_from = date,\n                values_from = pct_return,\n                values_fill = list(pct_return = 0))\nstock_date_matrix_tbl\n\n\n  \n\n\n# Output: stock_date_matrix_tbl"
  },
  {
    "objectID": "content/01_journal/01_machinelearningfundamentals.html#step-3---perform-k-means-clustering",
    "href": "content/01_journal/01_machinelearningfundamentals.html#step-3---perform-k-means-clustering",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n5.3 Step 3 - Perform K-Means Clustering",
    "text": "5.3 Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl &lt;- read_rds(\"C:/Users/ranja/Documents/GitHub/ss24-bdml-ranjan/Business Decisions with Machine Learning/Machine Learning/data/Business Decisions with Machine Learning/stock_date_matrix_tbl.rds\")\nstock_date_matrix_tbl\n\n\n  \n\n\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\n\nPerform kmeans() with centers = 4 and nstart = 20\n\nSave the result as kmeans_obj\n\n\n\n# Create kmeans_obj for 4 centers\nkmeans_obj &lt;- stock_date_matrix_tbl %&gt;% \n    select(-symbol) %&gt;% \n    kmeans(centers = 4, nstart = 20)\nkmeans_obj %&gt;% glance()\n\n\n  \n\n\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss\nbroom::glance(kmeans_obj)"
  },
  {
    "objectID": "content/01_journal/01_machinelearningfundamentals.html#step-4---find-the-optimal-value-of-k",
    "href": "content/01_journal/01_machinelearningfundamentals.html#step-4---find-the-optimal-value-of-k",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n5.4 Step 4 - Find the optimal value of K",
    "text": "5.4 Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper &lt;- function(center = 3) {\n    stock_date_matrix_tbl %&gt;%\n        select(-symbol) %&gt;%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n\n# Use purrr to map\nk_means_mapped_tbl &lt;- tibble(centers = 1:30) %&gt;% \n    mutate(k_means = centers %&gt;% map(kmeans_mapper),\n           glance = k_means %&gt;% map(glance))\n\n\nk_means_mapped_tbl\n\n\n  \n\n\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\n\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\n\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\nk_means_mapped_tbl %&gt;%\n    unnest(glance) %&gt;%\n    select(centers, tot.withinss) %&gt;%\n    \n    # Visualization\n    ggplot(aes(centers, tot.withinss)) +\n    geom_point(color = \"#000000\", size = 4) +\n    geom_line(color = \"#00008B\", size = 1) +\n    # Add labels (which are repelled a little)\n    ggrepel::geom_label_repel(aes(label = centers), color = \"#2DC6D6\") + \n    \n    # Formatting\n    labs(title = \"Skree Plot\",\n    subtitle = \"Measures the distance each of the customer are from the closes K-Means center\",\n    caption = \"Conclusion: Based on the Scree Plot, we select 3 clusters to segment the customer base.\")\n\n\n\n\n\n\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "content/01_journal/01_machinelearningfundamentals.html#step-5---apply-umap",
    "href": "content/01_journal/01_machinelearningfundamentals.html#step-5---apply-umap",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n5.5 Step 5 - Apply UMAP",
    "text": "5.5 Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(\"C:/Users/ranja/Documents/GitHub/ss24-bdml-ranjan/Business Decisions with Machine Learning/Machine Learning/data/Business Decisions with Machine Learning/k_means_mapped_tbl.rds\")\nk_means_mapped_tbl\n\n\n  \n\n\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\n\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n\n# Apply UMAP\numap_results &lt;-\n    subset(stock_date_matrix_tbl, select = -symbol) %&gt;%\n    umap()\n# Store results as: umap_results \n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\n\nConvert from a matrix data type to a tibble with as_tibble()\n\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\numap_results_tbl &lt;- umap_results$layout %&gt;%\n    as_tibble(.name_repair = \"unique\") %&gt;% # argument is required to set names in the next step\n    set_names(c(\"x\", \"y\")) %&gt;%\n    bind_cols(\n        stock_date_matrix_tbl %&gt;% select(symbol)\n    )\n# Output: umap_results_tbl\numap_results_tbl\n\n\n  \n\n\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\n\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\numap_results_tbl %&gt;%\n    ggplot(aes(x, y)) +\n    geom_point(alpha=0.5) + \n    ggrepel::geom_label_repel(aes(label = symbol), size = 2) +\n    theme_tq() +\n    labs(title = \"UMAP Projection\") \n\n\n\n\n\n\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "content/01_journal/01_machinelearningfundamentals.html#step-6---combine-k-means-and-umap",
    "href": "content/01_journal/01_machinelearningfundamentals.html#step-6---combine-k-means-and-umap",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n5.6 Step 6 - Combine K-Means and UMAP",
    "text": "5.6 Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(\"C:/Users/ranja/Documents/GitHub/ss24-bdml-ranjan/Business Decisions with Machine Learning/Machine Learning/data/Business Decisions with Machine Learning/k_means_mapped_tbl.rds\")\numap_results_tbl   &lt;- read_rds(\"C:/Users/ranja/Documents/GitHub/ss24-bdml-ranjan/Business Decisions with Machine Learning/Machine Learning/data/Business Decisions with Machine Learning/umap_results_tbl.rds\")\numap_results_tbl \n\n\n  \n\n\nk_means_mapped_tbl \n\n\n  \n\n\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\nk_means_obj &lt;- k_means_mapped_tbl %&gt;%\n    pull(k_means) %&gt;%\n    pluck(3)\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\n\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %&gt;% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\nkmeans_10_clusters_tbl &lt;- k_means_obj %&gt;% \n    augment(stock_date_matrix_tbl) %&gt;%\n    # Select the data we need\n    select(symbol, .cluster)\nsp_500_index_tbl_result &lt;-sp_500_index_tbl %&gt;% select(symbol, company, sector)\numap_kmeans_results_tbl &lt;- umap_results_tbl %&gt;%\n    left_join(kmeans_10_clusters_tbl,by=\"symbol\") %&gt;%\n    left_join(sp_500_index_tbl_result,by=\"symbol\")\n\n# Output: umap_kmeans_results_tbl \ntypeof(palette_light() %&gt;% sample(3))\n\n#&gt; [1] \"character\"\n\ntypeof(c(\"#00008B\", \"#2dc6d6\", \"#006400\"))\n\n#&gt; [1] \"character\"\n\n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\n\nUse ggplot() mapping V1, V2 and color = .cluster\n\nAdd the geom_point() geometry with alpha = 0.5\n\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %&gt;% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\numap_kmeans_results_tbl %&gt;%\n    mutate(label_text = str_glue(\"SYMBOL: {symbol}\n                                 Cluster: {.cluster}\")) %&gt;%\n    \n    ggplot(aes(V1, V2, color = .cluster)) +\n    # Geometries\n    geom_point(alpha=0.5) +\n    # Formatting\n    scale_color_manual(values= c(\"#00008B\", \"#2dc6d6\", \"#006400\")) +\n    labs(title = \"Company Segmentation: 2D Projection\",\n    subtitle = \"UMAP 2D Projection with K-Means Cluster Assignment\") +\n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "03 Automated Machine Learning with H20",
    "section": "",
    "text": "# Business case study Challenge 1\n\n# Libraries \nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(skimr)\nlibrary(GGally)\nlibrary(rsample)\n# Load Data data definitions\nemployee_attrition_tbl &lt;- read_csv(\"C:/Users/ranja/Documents/GitHub/ss24-bdml-ranjan/Business Decisions with Machine Learning/Machine Learning/data/Business Decisions with Machine Learning/datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\npath_data_definitions &lt;- \"C:/Users/ranja/Documents/GitHub/ss24-bdml-ranjan/Business Decisions with Machine Learning/Machine Learning/data/Business Decisions with Machine Learning/data_definitions.xlsx\"\ndefinitions_raw_tbl   &lt;- read_excel(path_data_definitions, sheet = 1, col_names = FALSE)\nemployee_attrition_tbl\n\n\n  \n\n\n# Business & Data Understanding: Department and Job Role\n# Data subset\ndept_job_role_tbl &lt;- employee_attrition_tbl %&gt;%\n  select(EmployeeNumber, Department, JobRole, PerformanceRating, Attrition)\ndept_job_role_tbl %&gt;%\n  group_by(Attrition) %&gt;%\n  summarize(n = n()) %&gt;%\n  ungroup() %&gt;%\n  mutate(pct = n / sum(n))\n\n\n  \n\n\n# Attrition by department\ndept_job_role_tbl %&gt;%\n  # Block 1\n  group_by(Department, Attrition) %&gt;%\n  summarize(n = n()) %&gt;%\n  ungroup() %&gt;%\n  # Block 2: Caution: It's easy to inadvertently miss grouping when creating counts & percents within groups\n  group_by(Department) %&gt;%\n  mutate(pct = n / sum(n))\n\n\n  \n\n\n# Attrition by job role\ndept_job_role_tbl %&gt;%\n  # Block 1\n  group_by(Department, JobRole, Attrition) %&gt;%\n  summarize(n = n()) %&gt;%\n  ungroup() %&gt;%\n  # Block 2\n  group_by(Department, JobRole) %&gt;%\n  mutate(pct = n / sum(n)) %&gt;%\n  ungroup() %&gt;%\n  # Block 3\n  filter(Attrition %in% \"Yes\")\n\n\n  \n\n\n# Develop KPI\ndept_job_role_tbl %&gt;%\n  # Block 1\n  group_by(Department, JobRole, Attrition) %&gt;%\n  summarize(n = n()) %&gt;%\n  ungroup() %&gt;%\n  # Block 2\n  group_by(Department, JobRole) %&gt;%\n  mutate(pct = n / sum(n)) %&gt;%\n  ungroup() %&gt;%\n  # Block 3\n  filter(Attrition %in% \"Yes\") %&gt;%\n  arrange(desc(pct)) %&gt;%\n  mutate(\n    above_industry_avg = case_when(\n      pct &gt; 0.088 ~ \"Yes\",\n      TRUE ~ \"No\"\n    )\n  )\n\n\n  \n\n\n# Function to calculate attrition cost\ncalculate_attrition_cost &lt;- function(\n    # Employee\n  n                    = 1,\n  salary               = 80000,\n  # Direct Costs\n  separation_cost      = 500,\n  vacancy_cost         = 10000,\n  acquisition_cost     = 4900,\n  placement_cost       = 3500,\n  # Productivity Costs\n  net_revenue_per_employee = 250000,\n  workdays_per_year        = 240,\n  workdays_position_open   = 40,\n  workdays_onboarding      = 60,\n  onboarding_efficiency    = 0.50\n) {\n  # Direct Costs\n  direct_cost &lt;- sum(separation_cost, vacancy_cost, acquisition_cost, placement_cost)\n  # Lost Productivity Costs\n  productivity_cost &lt;- net_revenue_per_employee / workdays_per_year *\n    (workdays_position_open + workdays_onboarding * onboarding_efficiency)\n  # Savings of Salary & Benefits (Cost Reduction)\n  salary_benefit_reduction &lt;- salary / workdays_per_year * workdays_position_open\n  # Estimated Turnover Per Employee\n  cost_per_employee &lt;- direct_cost + productivity_cost - salary_benefit_reduction\n  # Total Cost of Employee Turnover\n  total_cost &lt;- n * cost_per_employee\n  return(total_cost)\n}\ncalculate_attrition_cost()\n\n#&gt; [1] 78483.33\n\ncalculate_attrition_cost(200)\n\n#&gt; [1] 15696667\n\n# Use this\n# Function to convert counts to percentages. \ncount_to_pct &lt;- function(data, ..., col = n) {\n  # capture the dots\n  grouping_vars_expr &lt;- quos(...)\n  col_expr &lt;- enquo(col)\n  ret &lt;- data %&gt;%\n    group_by(!!! grouping_vars_expr) %&gt;%\n    mutate(pct = (!! col_expr) / sum(!! col_expr)) %&gt;%\n    ungroup()\n  return(ret)\n}\n# This is way shorter and more flexibel\ndept_job_role_tbl %&gt;%\n  count(JobRole, Attrition) %&gt;%\n  count_to_pct(JobRole)\n\n\n  \n\n\ndept_job_role_tbl %&gt;%\n  count(Department, JobRole, Attrition) %&gt;%\n  count_to_pct(Department, JobRole)  \n\n\n  \n\n\nassess_attrition &lt;- function(data, attrition_col, attrition_value, baseline_pct) {\n  attrition_col_expr &lt;- enquo(attrition_col)\n  data %&gt;%\n    \n    # Use parenthesis () to give tidy eval evaluation priority\n    filter((!! attrition_col_expr) %in% attrition_value) %&gt;%\n    arrange(desc(pct)) %&gt;%\n    mutate(\n      # Function inputs in numeric format (e.g. baseline_pct = 0.088 don't require tidy eval)\n      above_industry_avg = case_when(\n        pct &gt; baseline_pct ~ \"Yes\",\n        TRUE ~ \"No\"\n      )\n    )\n}\ndept_job_role_tbl %&gt;%\n  count(Department, JobRole, Attrition) %&gt;%\n  count_to_pct(Department, JobRole) %&gt;%\n  assess_attrition(Attrition, attrition_value = \"Yes\", baseline_pct = 0.088) %&gt;%\n  mutate(\n    cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)\n  )\n\n\n  \n\n\ndept_job_role_tbl %&gt;%\n  group_by(Department, JobRole, Attrition) %&gt;%\n  summarize(n = n()) %&gt;%\n  ungroup() %&gt;%\n  group_by(Department, JobRole) %&gt;%\n  mutate(pct = n / sum(n)) %&gt;%\n  ungroup() %&gt;%\n  filter(Attrition %in% \"Yes\") %&gt;%\n  arrange(desc(pct)) %&gt;%\n  mutate(\n    above_industry_avg = case_when(\n      pct &gt; 0.088 ~ \"Yes\",\n      TRUE ~ \"No\"\n    )\n  ) %&gt;%\n  mutate(\n    cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)\n  )\n\n\n  \n\n\ndept_job_role_tbl %&gt;%\n  count(Department, JobRole, Attrition) %&gt;%\n  count_to_pct(Department, JobRole) %&gt;%\n  assess_attrition(Attrition, attrition_value = \"Yes\", baseline_pct = 0.088) %&gt;%\n  mutate(\n    cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)\n  ) %&gt;%\n  # Data Manipulation\n  mutate(name = str_c(Department, JobRole, sep = \": \") %&gt;% as_factor()) %&gt;%\n  # Check levels\n  # pull(name) %&gt;%\n  # levels()\n  mutate(name      = fct_reorder(name, cost_of_attrition)) %&gt;%\n  mutate(cost_text = str_c(\"$\", format(cost_of_attrition / 1e6, digits = 2),\n                           \"M\", sep = \"\")) %&gt;%\n  #Plotting\n  ggplot(aes(cost_of_attrition, y = name)) +\n  geom_segment(aes(xend = 0, yend = name),    color = \"#00008B\") +\n  geom_point(  aes(size = cost_of_attrition), color = \"#00008B\") +\n  scale_x_continuous(labels = scales::dollar) +\n  geom_label(aes(label = cost_text, size = cost_of_attrition),\n             hjust = \"inward\", color = \"#00008B\") +\n  scale_size(range = c(3, 5)) +\n  labs(title = \"Estimated cost of Attrition: By Dept and Job Role\",\n       y = \"\",\n       x = \"Cost of attrition\") +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n# Function to plot attrition\nplot_attrition &lt;- function(data, \n                           ..., \n                           .value,\n                           fct_reorder = TRUE,\n                           fct_rev     = FALSE,\n                           include_lbl = TRUE,\n                           color       = \"#00008B\",\n                           units       = c(\"0\", \"K\", \"M\")) {\n  ### Inputs\n  group_vars_expr   &lt;- quos(...)\n  \n  # If the user does not supply anything, \n  # this takes the first column of the supplied data\n  if (length(group_vars_expr) == 0) {\n    group_vars_expr &lt;- quos(rlang::sym(colnames(data)[[1]]))\n  }\n  value_expr &lt;- enquo(.value)\n  units_val  &lt;- switch(units[[1]],\n                       \"M\" = 1e6,\n                       \"K\" = 1e3,\n                       \"0\" = 1)\n  if (units[[1]] == \"0\") units &lt;- \"\"\n  # Data Manipulation\n  # This is a so called Function Factory (a function that produces a function)\n  usd &lt;- scales::dollar_format(prefix = \"$\", largest_with_cents = 1e3)\n  # Create the axis labels and values for the plot\n  data_manipulated &lt;- data %&gt;%\n    mutate(name = str_c(!!! group_vars_expr, sep = \": \") %&gt;% as_factor()) %&gt;%\n    mutate(value_text = str_c(usd(!! value_expr / units_val),\n                              units[[1]], sep = \"\"))\n  \n  # Order the labels on the y-axis according to the input\n  if (fct_reorder) {\n    data_manipulated &lt;- data_manipulated %&gt;%\n      mutate(name = forcats::fct_reorder(name, !! value_expr)) %&gt;%\n      arrange(name)\n  }\n  if (fct_rev) {\n    data_manipulated &lt;- data_manipulated %&gt;%\n      mutate(name = forcats::fct_rev(name)) %&gt;%\n      arrange(name)\n  }\n  # Visualization\n  g &lt;- data_manipulated %&gt;%\n    # \"name\" is a column name generated by our function internally as part of the data manipulation task\n    ggplot(aes(x = (!! value_expr), y = name)) +\n    geom_segment(aes(xend = 0, yend = name), color = color) +\n    geom_point(aes(size = !! value_expr), color = color) +\n    scale_x_continuous(labels = scales::dollar) +\n    scale_size(range = c(3, 5)) +\n    theme(legend.position = \"none\")\n  # Plot labels if TRUE\n  if (include_lbl) {\n    g &lt;- g +\n      geom_label(aes(label = value_text, size = !! value_expr),\n                 hjust = \"inward\", color = color)\n  }\n  return(g)\n}\ndept_job_role_tbl %&gt;%\n  # Select columnns\n  count(Department, JobRole, Attrition) %&gt;%\n  count_to_pct(Department, JobRole) %&gt;%\n  \n  assess_attrition(Attrition, attrition_value = \"Yes\", baseline_pct = 0.088) %&gt;%\n  mutate(\n    cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)\n  ) %&gt;%\n  # Select columnns\n  plot_attrition(Department, JobRole, .value = cost_of_attrition,\n                 units = \"M\") +\n  labs(\n    title = \"Estimated Cost of Attrition by Job Role\",\n    x = \"Cost of Attrition\",\n    subtitle = \"Looks like Sales Executive and Labaratory Technician are the biggest drivers of cost\"\n  )\n\n\n\n\n\n\n# Step 1: Data Summarization -----\nskim(employee_attrition_tbl)\n\n\nData summary\n\n\nName\nemployee_attrition_tbl\n\n\nNumber of rows\n1470\n\n\nNumber of columns\n35\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n9\n\n\nnumeric\n26\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\nAttrition\n0\n1\n2\n3\n0\n2\n0\n\n\nBusinessTravel\n0\n1\n10\n17\n0\n3\n0\n\n\nDepartment\n0\n1\n5\n22\n0\n3\n0\n\n\nEducationField\n0\n1\n5\n16\n0\n6\n0\n\n\nGender\n0\n1\n4\n6\n0\n2\n0\n\n\nJobRole\n0\n1\n7\n25\n0\n9\n0\n\n\nMaritalStatus\n0\n1\n6\n8\n0\n3\n0\n\n\nOver18\n0\n1\n1\n1\n0\n1\n0\n\n\nOverTime\n0\n1\n2\n3\n0\n2\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\nAge\n0\n1\n36.92\n9.14\n18\n30.00\n36.0\n43.00\n60\n▂▇▇▃▂\n\n\nDailyRate\n0\n1\n802.49\n403.51\n102\n465.00\n802.0\n1157.00\n1499\n▇▇▇▇▇\n\n\nDistanceFromHome\n0\n1\n9.19\n8.11\n1\n2.00\n7.0\n14.00\n29\n▇▅▂▂▂\n\n\nEducation\n0\n1\n2.91\n1.02\n1\n2.00\n3.0\n4.00\n5\n▂▃▇▆▁\n\n\nEmployeeCount\n0\n1\n1.00\n0.00\n1\n1.00\n1.0\n1.00\n1\n▁▁▇▁▁\n\n\nEmployeeNumber\n0\n1\n1024.87\n602.02\n1\n491.25\n1020.5\n1555.75\n2068\n▇▇▇▇▇\n\n\nEnvironmentSatisfaction\n0\n1\n2.72\n1.09\n1\n2.00\n3.0\n4.00\n4\n▅▅▁▇▇\n\n\nHourlyRate\n0\n1\n65.89\n20.33\n30\n48.00\n66.0\n83.75\n100\n▇▇▇▇▇\n\n\nJobInvolvement\n0\n1\n2.73\n0.71\n1\n2.00\n3.0\n3.00\n4\n▁▃▁▇▁\n\n\nJobLevel\n0\n1\n2.06\n1.11\n1\n1.00\n2.0\n3.00\n5\n▇▇▃▂▁\n\n\nJobSatisfaction\n0\n1\n2.73\n1.10\n1\n2.00\n3.0\n4.00\n4\n▅▅▁▇▇\n\n\nMonthlyIncome\n0\n1\n6502.93\n4707.96\n1009\n2911.00\n4919.0\n8379.00\n19999\n▇▅▂▁▂\n\n\nMonthlyRate\n0\n1\n14313.10\n7117.79\n2094\n8047.00\n14235.5\n20461.50\n26999\n▇▇▇▇▇\n\n\nNumCompaniesWorked\n0\n1\n2.69\n2.50\n0\n1.00\n2.0\n4.00\n9\n▇▃▂▂▁\n\n\nPercentSalaryHike\n0\n1\n15.21\n3.66\n11\n12.00\n14.0\n18.00\n25\n▇▅▃▂▁\n\n\nPerformanceRating\n0\n1\n3.15\n0.36\n3\n3.00\n3.0\n3.00\n4\n▇▁▁▁▂\n\n\nRelationshipSatisfaction\n0\n1\n2.71\n1.08\n1\n2.00\n3.0\n4.00\n4\n▅▅▁▇▇\n\n\nStandardHours\n0\n1\n80.00\n0.00\n80\n80.00\n80.0\n80.00\n80\n▁▁▇▁▁\n\n\nStockOptionLevel\n0\n1\n0.79\n0.85\n0\n0.00\n1.0\n1.00\n3\n▇▇▁▂▁\n\n\nTotalWorkingYears\n0\n1\n11.28\n7.78\n0\n6.00\n10.0\n15.00\n40\n▇▇▂▁▁\n\n\nTrainingTimesLastYear\n0\n1\n2.80\n1.29\n0\n2.00\n3.0\n3.00\n6\n▂▇▇▂▃\n\n\nWorkLifeBalance\n0\n1\n2.76\n0.71\n1\n2.00\n3.0\n3.00\n4\n▁▃▁▇▂\n\n\nYearsAtCompany\n0\n1\n7.01\n6.13\n0\n3.00\n5.0\n9.00\n40\n▇▂▁▁▁\n\n\nYearsInCurrentRole\n0\n1\n4.23\n3.62\n0\n2.00\n3.0\n7.00\n18\n▇▃▂▁▁\n\n\nYearsSinceLastPromotion\n0\n1\n2.19\n3.22\n0\n0.00\n1.0\n3.00\n15\n▇▁▁▁▁\n\n\nYearsWithCurrManager\n0\n1\n4.12\n3.57\n0\n2.00\n3.0\n7.00\n17\n▇▂▅▁▁\n\n\n\n\n# Character Data Type\nemployee_attrition_tbl %&gt;%\n  select_if(is.character) %&gt;%\n  glimpse()\n\n#&gt; Rows: 1,470\n#&gt; Columns: 9\n#&gt; $ Attrition      &lt;chr&gt; \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\",…\n#&gt; $ BusinessTravel &lt;chr&gt; \"Travel_Rarely\", \"Travel_Frequently\", \"Travel_Rarely\", …\n#&gt; $ Department     &lt;chr&gt; \"Sales\", \"Research & Development\", \"Research & Developm…\n#&gt; $ EducationField &lt;chr&gt; \"Life Sciences\", \"Life Sciences\", \"Other\", \"Life Scienc…\n#&gt; $ Gender         &lt;chr&gt; \"Female\", \"Male\", \"Male\", \"Female\", \"Male\", \"Male\", \"Fe…\n#&gt; $ JobRole        &lt;chr&gt; \"Sales Executive\", \"Research Scientist\", \"Laboratory Te…\n#&gt; $ MaritalStatus  &lt;chr&gt; \"Single\", \"Married\", \"Single\", \"Married\", \"Married\", \"S…\n#&gt; $ Over18         &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", …\n#&gt; $ OverTime       &lt;chr&gt; \"Yes\", \"No\", \"Yes\", \"Yes\", \"No\", \"No\", \"Yes\", \"No\", \"No…\n\n# Get \"levels\"\nemployee_attrition_tbl %&gt;%\n  select_if(is.character) %&gt;%\n  map(unique)\n\n#&gt; $Attrition\n#&gt; [1] \"Yes\" \"No\" \n#&gt; \n#&gt; $BusinessTravel\n#&gt; [1] \"Travel_Rarely\"     \"Travel_Frequently\" \"Non-Travel\"       \n#&gt; \n#&gt; $Department\n#&gt; [1] \"Sales\"                  \"Research & Development\" \"Human Resources\"       \n#&gt; \n#&gt; $EducationField\n#&gt; [1] \"Life Sciences\"    \"Other\"            \"Medical\"          \"Marketing\"       \n#&gt; [5] \"Technical Degree\" \"Human Resources\" \n#&gt; \n#&gt; $Gender\n#&gt; [1] \"Female\" \"Male\"  \n#&gt; \n#&gt; $JobRole\n#&gt; [1] \"Sales Executive\"           \"Research Scientist\"       \n#&gt; [3] \"Laboratory Technician\"     \"Manufacturing Director\"   \n#&gt; [5] \"Healthcare Representative\" \"Manager\"                  \n#&gt; [7] \"Sales Representative\"      \"Research Director\"        \n#&gt; [9] \"Human Resources\"          \n#&gt; \n#&gt; $MaritalStatus\n#&gt; [1] \"Single\"   \"Married\"  \"Divorced\"\n#&gt; \n#&gt; $Over18\n#&gt; [1] \"Y\"\n#&gt; \n#&gt; $OverTime\n#&gt; [1] \"Yes\" \"No\"\n\n# Proportions    \nemployee_attrition_tbl %&gt;%\n  select_if(is.character) %&gt;%\n  map(~ table(.) %&gt;% prop.table())\n\n#&gt; $Attrition\n#&gt; .\n#&gt;        No       Yes \n#&gt; 0.8387755 0.1612245 \n#&gt; \n#&gt; $BusinessTravel\n#&gt; .\n#&gt;        Non-Travel Travel_Frequently     Travel_Rarely \n#&gt;         0.1020408         0.1884354         0.7095238 \n#&gt; \n#&gt; $Department\n#&gt; .\n#&gt;        Human Resources Research & Development                  Sales \n#&gt;             0.04285714             0.65374150             0.30340136 \n#&gt; \n#&gt; $EducationField\n#&gt; .\n#&gt;  Human Resources    Life Sciences        Marketing          Medical \n#&gt;       0.01836735       0.41224490       0.10816327       0.31564626 \n#&gt;            Other Technical Degree \n#&gt;       0.05578231       0.08979592 \n#&gt; \n#&gt; $Gender\n#&gt; .\n#&gt; Female   Male \n#&gt;    0.4    0.6 \n#&gt; \n#&gt; $JobRole\n#&gt; .\n#&gt; Healthcare Representative           Human Resources     Laboratory Technician \n#&gt;                0.08911565                0.03537415                0.17619048 \n#&gt;                   Manager    Manufacturing Director         Research Director \n#&gt;                0.06938776                0.09863946                0.05442177 \n#&gt;        Research Scientist           Sales Executive      Sales Representative \n#&gt;                0.19863946                0.22176871                0.05646259 \n#&gt; \n#&gt; $MaritalStatus\n#&gt; .\n#&gt;  Divorced   Married    Single \n#&gt; 0.2224490 0.4578231 0.3197279 \n#&gt; \n#&gt; $Over18\n#&gt; .\n#&gt; Y \n#&gt; 1 \n#&gt; \n#&gt; $OverTime\n#&gt; .\n#&gt;        No       Yes \n#&gt; 0.7170068 0.2829932\n\n# Numeric Data\nemployee_attrition_tbl %&gt;%\n  select_if(is.numeric) %&gt;%\n  map(~ unique(.) %&gt;% length())\n\n#&gt; $Age\n#&gt; [1] 43\n#&gt; \n#&gt; $DailyRate\n#&gt; [1] 886\n#&gt; \n#&gt; $DistanceFromHome\n#&gt; [1] 29\n#&gt; \n#&gt; $Education\n#&gt; [1] 5\n#&gt; \n#&gt; $EmployeeCount\n#&gt; [1] 1\n#&gt; \n#&gt; $EmployeeNumber\n#&gt; [1] 1470\n#&gt; \n#&gt; $EnvironmentSatisfaction\n#&gt; [1] 4\n#&gt; \n#&gt; $HourlyRate\n#&gt; [1] 71\n#&gt; \n#&gt; $JobInvolvement\n#&gt; [1] 4\n#&gt; \n#&gt; $JobLevel\n#&gt; [1] 5\n#&gt; \n#&gt; $JobSatisfaction\n#&gt; [1] 4\n#&gt; \n#&gt; $MonthlyIncome\n#&gt; [1] 1349\n#&gt; \n#&gt; $MonthlyRate\n#&gt; [1] 1427\n#&gt; \n#&gt; $NumCompaniesWorked\n#&gt; [1] 10\n#&gt; \n#&gt; $PercentSalaryHike\n#&gt; [1] 15\n#&gt; \n#&gt; $PerformanceRating\n#&gt; [1] 2\n#&gt; \n#&gt; $RelationshipSatisfaction\n#&gt; [1] 4\n#&gt; \n#&gt; $StandardHours\n#&gt; [1] 1\n#&gt; \n#&gt; $StockOptionLevel\n#&gt; [1] 4\n#&gt; \n#&gt; $TotalWorkingYears\n#&gt; [1] 40\n#&gt; \n#&gt; $TrainingTimesLastYear\n#&gt; [1] 7\n#&gt; \n#&gt; $WorkLifeBalance\n#&gt; [1] 4\n#&gt; \n#&gt; $YearsAtCompany\n#&gt; [1] 37\n#&gt; \n#&gt; $YearsInCurrentRole\n#&gt; [1] 19\n#&gt; \n#&gt; $YearsSinceLastPromotion\n#&gt; [1] 16\n#&gt; \n#&gt; $YearsWithCurrManager\n#&gt; [1] 18\n\nemployee_attrition_tbl %&gt;%\n  select_if(is.numeric) %&gt;%\n  map_df(~ unique(.) %&gt;% length()) %&gt;%\n  # Select all columns\n  pivot_longer(everything()) %&gt;%\n  arrange(value) %&gt;%\n  filter(value &lt;= 10)\n\n\n  \n\n\n# Step 2: Data Visualization ----\nemployee_attrition_tbl %&gt;%\n  select(Attrition, Age, Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome) %&gt;%\n  ggpairs() \n\n\n\n\n\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition, Age, Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome) %&gt;%\n  ggpairs(aes(color = Attrition), lower = \"blank\", legend = 1,\n          diag  = list(continuous = wrap(\"densityDiag\", alpha = 0.5))) +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\nplot_ggpairs &lt;- function(data, color = NULL, density_alpha = 0.5) {\n  \n  color_expr &lt;- enquo(color)\n  \n  if (rlang::quo_is_null(color_expr)) {\n    \n    g &lt;- data %&gt;%\n      ggpairs(lower = \"blank\") \n    \n  } else {\n    \n    color_name &lt;- quo_name(color_expr)\n    \n    g &lt;- data %&gt;%\n      ggpairs(mapping = aes_string(color = color_name), \n              lower = \"blank\", legend = 1,\n              diag = list(continuous = wrap(\"densityDiag\", \n                                            alpha = density_alpha))) +\n      theme(legend.position = \"bottom\",\n            text = element_text(size=8),\n            axis.text = element_text(size = 10),\n            axis.title = element_text(size = 10))\n  }\n  \n  return(g)\n  \n}\n\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition,  contains(\"Training\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n\n1 Challenge 1\nUse your learning from descriptive features and plot_ggpairs() to further investigate the features. Run the functions above according to the features needed. Answer the following questions. Most of the time, you will only need the images from diagonal.\n\n\nWhat can you deduce about the interaction between Monthly Income and Attrition? c\n\n\n\nThose that are leaving the company have a higher Monthly Income\nThat those are staying have a lower Monthly Income\nThose that are leaving have a lower Monthly Income\nIt’s difficult to deduce anything based on the visualization\n\n\n\nWhat can you deduce about the interaction between Percent Salary Hike and Attrition? d\n\n\n\nThose that are leaving the company have a higher Percent Salary Hike\nThose that are staying have a lower Percent Salary Hike\nThose that are leaving have lower Percent Salary Hike\nIt’s difficult to deduce anything based on the visualization\n\n\n\nWhat can you deduce about the interaction between Stock Option Level and Attrition? b\n\n\n\nThose that are leaving the company have a higher stock option level\nThose that are staying have a higher stock option level\nIt’s difficult to deduce anything based on the visualization\n\n\n\nWhat can you deduce about the interaction between Environment Satisfaction and Attrition? a\n\n\n\nA higher proportion of those leaving have a low environment satisfaction level\nA higher proportion of those leaving have a high environment satisfaction level\nIt’s difficult to deduce anything based on the visualization\n\n\n\nWhat can you deduce about the interaction between Work Life Balance and Attrition b\n\n\n\nThose that are leaving have higher density of 2’s and 3’s\nThose that are staying have a higher density of 2’s and 3’s\nThose that are staying have a lower density of 2’s and 3’s\nIt’s difficult to deduce anything based on the visualization\n\n\n\nWhat Can you deduce about the interaction between Job Involvement and Attrition? a\n\n\n\nThose that are leaving have a lower density of 3’s and 4’s\nThose that are leaving have a lower density of 1’s and 2’s\nThose that are staying have a lower density of 2’s and 3’s\nIt’s difficult to deduce anything based on the visualization\n\n\n\nWhat can you deduce about the interaction between Over Time and Attrition? a\n\n\n\nThe proportion of those leaving that are working Over Time are high compared to those that are not leaving\nThe proportion of those staying that are working Over Time are high compared to those that are not staying\n\n\n\nWhat can you deduce about the interaction between Training Times Last Year and Attrition b\n\n\n\nPeople that leave tend to have more annual trainings\nPeople that leave tend to have less annual trainings\nIt’s difficult to deduce anything based on the visualization\n\n\n\nWhat can you deduce about the interaction between Years At Company and Attrition b\n\n\n\nPeople that leave tend to have more working years at the company\nPeople that leave tend to have less working years at the company\nIt’s difficult to deduce anything based on the visualization\n\n\n\nWhat can you deduce about the interaction between Years Since Last Promotion and Attrition? c\n\n\n\nThose that are leaving have more years since last promotion than those that are staying\nThose that are leaving have fewer years since last promotion than those that are staying\nIt’s difficult to deduce anything based on the visualization\n\n\n#Challenge 2\n## Load the training & test dataset\nlibrary(tidyverse)\n# Modeling\nlibrary(parsnip)\n# Pre-processing & Sampling\nlibrary(recipes)\nlibrary(rsample)\n# Modeling Error Metrics\nlibrary(yardstick)\nlibrary(workflows)\nlibrary(tune)\n\nproduct_data &lt;- read_csv(\"C:/Users/ranja/Documents/GitHub/ss24-bdml-1ranjan/Business Decisions with Machine Learning/Machine Learning/data/Business Decisions with Machine Learning/product_backorders.csv\")\nproduct_data2 &lt;- product_data %&gt;% \n  mutate(\n    product_backorder = went_on_backorder %&gt;% str_to_lower() %&gt;% str_detect(\"yes\") %&gt;% as.numeric()\n  ) %&gt;% \n  select(-c(went_on_backorder))\nglimpse(product_data)\n\n#&gt; Rows: 19,053\n#&gt; Columns: 23\n#&gt; $ sku               &lt;dbl&gt; 1113121, 1113268, 1113874, 1114222, 1114823, 1115453…\n#&gt; $ national_inv      &lt;dbl&gt; 0, 0, 20, 0, 0, 55, -34, 4, 2, -7, 1, 2, 0, 0, 0, 0,…\n#&gt; $ lead_time         &lt;dbl&gt; 8, 8, 2, 8, 12, 8, 8, 9, 8, 8, 8, 8, 12, 2, 12, 4, 2…\n#&gt; $ in_transit_qty    &lt;dbl&gt; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0…\n#&gt; $ forecast_3_month  &lt;dbl&gt; 6, 2, 45, 9, 31, 216, 120, 43, 4, 56, 2, 5, 5, 54, 4…\n#&gt; $ forecast_6_month  &lt;dbl&gt; 6, 3, 99, 14, 31, 360, 240, 67, 6, 96, 4, 9, 6, 72, …\n#&gt; $ forecast_9_month  &lt;dbl&gt; 6, 4, 153, 21, 31, 492, 240, 115, 9, 112, 6, 13, 9, …\n#&gt; $ sales_1_month     &lt;dbl&gt; 0, 1, 16, 5, 7, 30, 83, 5, 1, 13, 0, 1, 0, 0, 1, 0, …\n#&gt; $ sales_3_month     &lt;dbl&gt; 4, 2, 42, 17, 15, 108, 122, 22, 5, 30, 2, 5, 4, 0, 3…\n#&gt; $ sales_6_month     &lt;dbl&gt; 9, 3, 80, 36, 33, 275, 144, 40, 6, 56, 3, 8, 5, 0, 4…\n#&gt; $ sales_9_month     &lt;dbl&gt; 12, 3, 111, 43, 47, 340, 165, 58, 9, 76, 4, 11, 6, 0…\n#&gt; $ min_bank          &lt;dbl&gt; 0, 0, 10, 0, 2, 51, 33, 4, 2, 0, 0, 0, 3, 4, 0, 0, 0…\n#&gt; $ potential_issue   &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#&gt; $ pieces_past_due   &lt;dbl&gt; 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#&gt; $ perf_6_month_avg  &lt;dbl&gt; 0.90, 0.96, 0.81, 0.96, 0.98, 0.00, 1.00, 0.69, 1.00…\n#&gt; $ perf_12_month_avg &lt;dbl&gt; 0.89, 0.97, 0.88, 0.98, 0.98, 0.00, 0.97, 0.68, 0.95…\n#&gt; $ local_bo_qty      &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 34, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, …\n#&gt; $ deck_risk         &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#&gt; $ oe_constraint     &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#&gt; $ ppap_risk         &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No…\n#&gt; $ stop_auto_buy     &lt;chr&gt; \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n#&gt; $ rev_stop          &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#&gt; $ went_on_backorder &lt;chr&gt; \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n\nsplit_obj&lt;- initial_split(product_data2, prop = 0.75)\ntrain_tbl&lt;- training(split_obj)\ntest_tbl&lt;- testing(split_obj)\n\n## Specifiy the response and predictor variables\nrecipe_obj &lt;- recipe(product_backorder ~., data = train_tbl) %&gt;% \n  step_zv(all_predictors()) %&gt;% \n  step_dummy(all_nominal(),-all_outcomes()) %&gt;%\n  prep()\n\nsummary(recipe_obj)\n\n\n  \n\n\nglimpse(bake(recipe_obj,new_data = NULL))\n\n#&gt; Rows: 14,289\n#&gt; Columns: 23\n#&gt; $ sku                 &lt;dbl&gt; 3220596, 1455385, 1633738, 1297098, 3225642, 11402…\n#&gt; $ national_inv        &lt;dbl&gt; 117, 147915, 810, 2, 160, -1, 468, 291, -29, 41, 9…\n#&gt; $ lead_time           &lt;dbl&gt; 4, 8, 8, 8, 2, 8, 8, 9, 6, 2, 8, 8, 2, 12, 2, 12, …\n#&gt; $ in_transit_qty      &lt;dbl&gt; 60, 14208, 0, 0, 78, 0, 4, 7, 0, 2, 0, 249, 28, 0,…\n#&gt; $ forecast_3_month    &lt;dbl&gt; 200, 154176, 0, 0, 210, 9, 0, 271, 266, 205, 0, 13…\n#&gt; $ forecast_6_month    &lt;dbl&gt; 300, 285504, 0, 0, 480, 13, 0, 419, 456, 338, 0, 2…\n#&gt; $ forecast_9_month    &lt;dbl&gt; 300, 396096, 0, 0, 690, 17, 0, 629, 608, 475, 0, 3…\n#&gt; $ sales_1_month       &lt;dbl&gt; 316, 39678, 0, 0, 98, 10, 13, 124, 76, 40, 2, 373,…\n#&gt; $ sales_3_month       &lt;dbl&gt; 379, 119264, 0, 0, 232, 11, 46, 392, 167, 138, 3, …\n#&gt; $ sales_6_month       &lt;dbl&gt; 450, 233797, 0, 0, 454, 16, 108, 802, 317, 268, 4,…\n#&gt; $ sales_9_month       &lt;dbl&gt; 556, 376082, 0, 1, 662, 21, 188, 1073, 505, 405, 9…\n#&gt; $ min_bank            &lt;dbl&gt; 64, 33388, 1, 0, 73, 0, 33, 44, 30, 63, 0, 380, 45…\n#&gt; $ pieces_past_due     &lt;dbl&gt; 0, 13824, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, …\n#&gt; $ perf_6_month_avg    &lt;dbl&gt; 0.98, 0.63, -99.00, 0.97, 1.00, 0.90, 0.97, 0.91, …\n#&gt; $ perf_12_month_avg   &lt;dbl&gt; 0.96, 0.78, -99.00, 0.97, 1.00, 0.88, 0.95, 0.74, …\n#&gt; $ local_bo_qty        &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0…\n#&gt; $ product_backorder   &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,…\n#&gt; $ potential_issue_Yes &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,…\n#&gt; $ deck_risk_Yes       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n#&gt; $ oe_constraint_Yes   &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n#&gt; $ ppap_risk_Yes       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1,…\n#&gt; $ stop_auto_buy_Yes   &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n#&gt; $ rev_stop_Yes        &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n\nlibrary(h2o)\nh2o.init()\n\n#&gt; \n#&gt; H2O is not running yet, starting it now...\n#&gt; \n#&gt; Note:  In case of errors look at the following log files:\n#&gt;     C:\\Users\\ranja\\AppData\\Local\\Temp\\RtmpaYbvlu\\file3968e477e65/h2o_ranjan_started_from_r.out\n#&gt;     C:\\Users\\ranja\\AppData\\Local\\Temp\\RtmpaYbvlu\\file39685e1d12e/h2o_ranjan_started_from_r.err\n#&gt; \n#&gt; \n#&gt; Starting H2O JVM and connecting:  Connection successful!\n#&gt; \n#&gt; R is connected to the H2O cluster: \n#&gt;     H2O cluster uptime:         3 seconds 472 milliseconds \n#&gt;     H2O cluster timezone:       Europe/Berlin \n#&gt;     H2O data parsing timezone:  UTC \n#&gt;     H2O cluster version:        3.44.0.3 \n#&gt;     H2O cluster version age:    6 months and 3 days \n#&gt;     H2O cluster name:           H2O_started_from_R_ranjan_mjz288 \n#&gt;     H2O cluster total nodes:    1 \n#&gt;     H2O cluster total memory:   1.91 GB \n#&gt;     H2O cluster total cores:    4 \n#&gt;     H2O cluster allowed cores:  4 \n#&gt;     H2O cluster healthy:        TRUE \n#&gt;     H2O Connection ip:          localhost \n#&gt;     H2O Connection port:        54321 \n#&gt;     H2O Connection proxy:       NA \n#&gt;     H2O Internal Security:      FALSE \n#&gt;     R Version:                  R version 4.3.3 (2024-02-29 ucrt)\n\nsplit_h2o &lt;- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.75), seed = 42)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntrain_h2o &lt;- split_h2o[[1]]\nvalid_h2o &lt;- split_h2o[[2]]\ntest_h2o  &lt;- as.h2o(test_tbl)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# Set the target and predictors\ny &lt;- \"product_backorder\"\nx &lt;- setdiff(names(train_h2o), y)\n\nautoml_models_h2o &lt;- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 120,\n  nfolds            = 5,\n  stopping_metric = \"mae\", stopping_rounds = 3,\n  stopping_tolerance = 1e-2\n)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |==                                                                    |   2%\n#&gt; 15:45:31.274: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n#&gt; 15:45:31.291: AutoML: XGBoost is not available; skipping it.\n#&gt; 15:45:31.365: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 15:45:31.366: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n#&gt; 15:45:33.538: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 15:45:33.538: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |====                                                                  |   6%\n#&gt; 15:45:39.10: _train param, Dropping unused columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 15:45:39.10: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n#&gt; 15:45:40.174: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 15:45:40.174: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |=======                                                               |  11%\n#&gt; 15:45:43.663: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 15:45:43.663: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |==========                                                            |  14%\n#&gt; 15:45:46.91: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 15:45:46.91: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n#&gt; 15:45:48.413: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 15:45:48.413: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |============                                                          |  17%\n#&gt; 15:45:51.112: _train param, Dropping unused columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 15:45:51.112: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n#&gt; 15:45:51.918: _train param, Dropping unused columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 15:45:51.918: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n#&gt; 15:45:52.707: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 15:45:52.707: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |===============                                                       |  21%\n#&gt; 15:45:56.477: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 15:45:56.477: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |=================                                                     |  24%\n#&gt; 15:45:58.830: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 15:45:58.830: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |==================                                                    |  26%\n#&gt; 15:46:01.657: _train param, Dropping unused columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 15:46:01.657: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n#&gt; 15:46:02.427: _train param, Dropping unused columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 15:46:02.427: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |=====================                                                 |  29%\n  |                                                                            \n  |========================                                              |  34%\n  |                                                                            \n  |===========================                                           |  38%\n  |                                                                            \n  |=============================                                         |  42%\n  |                                                                            \n  |================================                                      |  45%\n  |                                                                            \n  |===================================                                   |  49%\n  |                                                                            \n  |=====================================                                 |  53%\n  |                                                                            \n  |========================================                              |  58%\n  |                                                                            \n  |===========================================                           |  62%\n  |                                                                            \n  |==============================================                        |  66%\n  |                                                                            \n  |================================================                      |  69%\n  |                                                                            \n  |========================================================              |  81%\n  |                                                                            \n  |=============================================================         |  88%\n  |                                                                            \n  |================================================================      |  91%\n#&gt; 15:47:19.383: _train param, Dropping unused columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 15:47:19.383: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n#&gt; 15:47:20.25: _train param, Dropping unused columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#&gt; 15:47:20.25: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |===================================================================   |  95%\n  |                                                                            \n  |======================================================================| 100%\n\n## View the leaderboard\nautoml_models_h2o@leaderboard \n\n#&gt;                                                  model_id      rmse        mse\n#&gt; 1 StackedEnsemble_BestOfFamily_4_AutoML_1_20240624_154531 0.2190596 0.04798713\n#&gt; 2    StackedEnsemble_AllModels_3_AutoML_1_20240624_154531 0.2191320 0.04801882\n#&gt; 3    StackedEnsemble_AllModels_2_AutoML_1_20240624_154531 0.2199083 0.04835964\n#&gt; 4 StackedEnsemble_BestOfFamily_3_AutoML_1_20240624_154531 0.2203049 0.04853425\n#&gt; 5    StackedEnsemble_AllModels_1_AutoML_1_20240624_154531 0.2208313 0.04876648\n#&gt; 6 StackedEnsemble_BestOfFamily_2_AutoML_1_20240624_154531 0.2215874 0.04910097\n#&gt;         mae     rmsle mean_residual_deviance\n#&gt; 1 0.1114723 0.1538888             0.04798713\n#&gt; 2 0.1126175 0.1542711             0.04801882\n#&gt; 3 0.1147436 0.1550769             0.04835964\n#&gt; 4 0.1138758 0.1549722             0.04853425\n#&gt; 5 0.1149999 0.1555652             0.04876648\n#&gt; 6 0.1138820 0.1556633             0.04910097\n#&gt; \n#&gt; [43 rows x 6 columns]\n\nextract_h2o_model_name_by_position &lt;- function(h2o_leaderboard, n = 1, verbose = T) {\n  \n  model_name &lt;- h2o_leaderboard %&gt;%\n    as.tibble() %&gt;%\n    slice_(n) %&gt;%\n    pull(model_id)\n  \n  if (verbose) message(model_name)\n  \n  return(model_name)\n  \n}\n\n## Predicting using Leader Model\nbest_model &lt;- automl_models_h2o@leaderboard %&gt;% \n  extract_h2o_model_name_by_position(1) %&gt;% \n  h2o.getModel()\npredictions &lt;- h2o.predict(best_model, newdata = as.h2o(test_tbl))\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntypeof(predictions)\n\n#&gt; [1] \"environment\"\n\npredictions_tbl &lt;- predictions %&gt;% as_tibble()\nglimpse(predictions_tbl)\n\n#&gt; Rows: 4,764\n#&gt; Columns: 1\n#&gt; $ predict &lt;dbl&gt; 0.56442356, 0.54658444, 0.51288133, 0.80224757, 0.39801123, 0.…\n\n## Save the leader model\nbest_model %&gt;% h2o.saveModel(path = \"StackedEnsemble_AllModels_AutoML_20220603_533865\")\n\n#&gt; [1] \"C:\\\\Users\\\\ranja\\\\Documents\\\\GitHub\\\\ss24-bdml-ranjan\\\\content\\\\01_journal\\\\StackedEnsemble_AllModels_AutoML_20220603_533865\\\\StackedEnsemble_BestOfFamily_4_AutoML_1_20240624_154531\""
  }
]